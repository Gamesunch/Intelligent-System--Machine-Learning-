import streamlit as st

st.title("üìä **‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏• SVM ‡πÅ‡∏•‡∏∞ Random Forest**")

st.header("üìå **‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á Dataset**")
st.markdown("[üìÇ Life Expectancy (WHO) Dataset](https://www.kaggle.com/datasets/kumarajarshi/life-expectancy-who)")

st.header("üîπ **‡∏°‡∏µ Feature 22 ‡∏≠‡∏±‡∏ô ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ**")

col1, col2 = st.columns(2)

with col1:
    st.write("- **Country** ‚Äì üåç ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    st.write("- **Year** ‚Äì üìÖ ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    st.write("- **Status** ‚Äì üåç ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® (**Developed / Developing**)")
    st.write("- **Life Expectancy** ‚Äì ‚è≥ **‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏±‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå)**")
    st.write("- **Adult Mortality** ‚Äì ‚ö∞Ô∏è ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏´‡∏ç‡πà")
    st.write("- **Infant Deaths** ‚Äì üë∂ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏≤‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï")
    st.write("- **Under-Five Deaths** ‚Äì üßí ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏î‡πá‡∏Å‡∏≠‡∏≤‡∏¢‡∏∏‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 5 ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï")
    st.write("- **HIV/AIDS** ‚Äì ü¶† ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏à‡∏≤‡∏Å HIV/AIDS")
    st.write("- **Alcohol** ‚Äì üç∑ ‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ‡πÅ‡∏≠‡∏•‡∏Å‡∏≠‡∏Æ‡∏≠‡∏•‡πå‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô")
    st.write("- **Percentage Expenditure** ‚Äì üí∞ ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏î‡πâ‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û (**% GDP**)")
    st.write("- **Hepatitis B** ‚Äì üíâ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏â‡∏µ‡∏î‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô Hepatitis B")
    
with col2:
    st.write("- **Measles** ‚Äì ü§ß ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÇ‡∏£‡∏Ñ‡∏´‡∏±‡∏î‡∏ï‡πà‡∏≠‡∏õ‡∏µ")
    st.write("- **Polio** ‚Äì üíâ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏â‡∏µ‡∏î‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô‡πÇ‡∏õ‡∏•‡∏¥‡πÇ‡∏≠")
    st.write("- **Diphtheria** ‚Äì üíâ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏â‡∏µ‡∏î‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô‡∏Ñ‡∏≠‡∏ï‡∏µ‡∏ö")
    st.write("- **Total Expenditure** ‚Äì üíµ ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏î‡πâ‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏£‡∏±‡∏ê‡∏ö‡∏≤‡∏• (**% GDP**)")
    st.write("- **BMI** ‚Äì ‚öñÔ∏è ‡∏Ñ‡πà‡∏≤‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏°‡∏ß‡∏•‡∏Å‡∏≤‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢")
    st.write("- **Thinness 1-19 Years** ‚Äì üèÉ‚Äç‚ôÇÔ∏è ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏†‡∏≤‡∏ß‡∏∞‡∏ú‡∏≠‡∏°‡∏ö‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏¢‡∏≤‡∏ß‡∏ä‡∏ô (**1-19 ‡∏õ‡∏µ**)")
    st.write("- **Thinness 5-9 Years** ‚Äì üèÉ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏†‡∏≤‡∏ß‡∏∞‡∏ú‡∏≠‡∏°‡∏ö‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏Å (**5-9 ‡∏õ‡∏µ**)")
    st.write("- **GDP** ‚Äì üìà **‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏°‡∏ß‡∏•‡∏£‡∏ß‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏±‡∏ß**")
    st.write("- **Population** ‚Äì üë• **‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏Å‡∏£‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®**")
    st.write("- **Income Composition of Resources** ‚Äì üí≥ ‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ")
    st.write("- **Schooling** ‚Äì üéì **‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏µ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤**")


st.write("‡∏Ç‡∏±‡πâ‡∏ô‡πÅ‡∏£‡∏Å‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏°‡∏≤‡∏î‡∏π head ‡∏Å‡∏±‡∏ö Tail ‡∏Ç‡∏≠‡∏á Dataset ‡∏Å‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô")
st.write("Head ‡∏Ç‡∏≠‡∏á Dataset")
st.image("image/ML/head.png")
st.write("Tail ‡∏Ç‡∏≠‡∏á Dataset")
st.image("image/ML/tail.png")

st.header("üìå **Data Cleaning**")
st.write("‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•")
st.write("‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Missing Values ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ")
st.write("1. ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ clean column names ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©")
st.write("‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `df.columns = df.columns.str.strip()`")
st.write("2. ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏´‡∏≤ Missing Values ‡πÉ‡∏ô Dataset")
st.write("‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `df.isnull().sum()`")
st.image("image/ML/findnull.png")
st.write("‡∏à‡∏∞‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤‡∏°‡∏µ Data ‡∏ó‡∏µ‡πà‡∏°‡∏µ Missing Values ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß")
st.write("‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Encode ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Categorical ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `df['Status'] = df['Status'].map({'Developing': 0, 'Developed': 1})`")
st.write("‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ 2 ‡∏Ñ‡πà‡∏≤ Developing ‡∏Å‡∏±‡∏ö Developed ‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏Å‡∏±‡∏ö 1")
st.write("3. ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Drop ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ Missing Values ‡πÉ‡∏ô Target Variable")
st.write("‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `df = df.dropna(subset=['Life expectancy']).reset_index(drop=True)`")
st.write("4. ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Handle Missing Values ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£ Impute ‡∏î‡πâ‡∏ß‡∏¢ Median")
st.write("‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `df.fillna(df.median(numeric_only=True), inplace=True)`")

col3, col4 = st.columns(2)

with col3:
    st.image("image/ML/Before_null.png")
    
with col4:
    st.image("image/ML/After_null.png")

st.write("‡∏à‡∏∞‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Impute ‡∏î‡πâ‡∏ß‡∏¢ Median ‡πÅ‡∏•‡πâ‡∏ß Missing Values ‡∏à‡∏∞‡∏´‡∏≤‡∏¢‡πÑ‡∏õ")
st.write("5. ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Scale Features ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SVM")
st.write("‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ MinMaxScaler ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Scale Features ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `scaler = MinMaxScaler()`")
st.write("‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Scale Features ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `X_scaled = scaler.fit_transform(X)`")

col5, col6 = st.columns(2)

with col5:
    st.image("image/ML/Before_distrubute.png")
    
with col6:
    st.image("image/ML/After_distrubute.png")


st.header("üìå **Model Training**")
st.write("‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ split Dataset ‡πÇ‡∏î‡∏¢‡∏à‡∏∞‡πÉ‡∏´‡πâ Train 80% ‡πÅ‡∏•‡∏∞ Test 20% ‡∏Å‡πà‡∏≠‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:\n\n" "  `X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)`")

st.header("üîπ **Support Vector Machine (SVM)**")
st.write("‡πÇ‡∏î‡∏¢‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á SVM ‡∏Ñ‡∏∑‡∏≠ SVM ‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£ Hyperplane ‡πÅ‡∏•‡∏∞ Margin Maximization ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Kernel Trick ‡πÄ‡∏ä‡πà‡∏ô RBF Kernel ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡∏î‡∏µ ‡πÇ‡∏î‡∏¢‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î SVR (Support Vector Regression) ‡∏û‡∏£‡πâ‡∏≠‡∏° GridSearchCV ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡πà‡∏≤ C ‡πÅ‡∏•‡∏∞ Epsilon ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå Life Expectancy")
st.code("""
svm_param_grid = {'C': [0.1, 1, 5, 10], 'epsilon': [0.001, 0.01, 0.1]}
svm_grid = GridSearchCV(SVR(kernel='rbf'), svm_param_grid, cv=5, scoring='r2', n_jobs=-1)
svm_grid.fit(X_train, y_train)
best_svm_model = svm_grid.best_estimator_
""", language="python")

st.header("üîπ **Random Forest**")
st.write("‡πÇ‡∏î‡∏¢‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á Random Forest ‡∏Ñ‡∏∑‡∏≠ Random Forest ‡πÉ‡∏ä‡πâ‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î Ensemble Learning ‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏° ‡∏´‡∏•‡∏≤‡∏¢ Decision Trees ‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ Bootstrap Sampling ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡πâ‡∏ô ‡∏•‡∏î Overfitting ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ ‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ GridSearchCV ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ (n_estimators) ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ (max_depth) ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î")
st.code("""
rf_param_grid = {'n_estimators': [50, 100, 200], 'max_depth': [None, 10, 20]}
rf_grid = GridSearchCV(RandomForestRegressor(random_state=42), rf_param_grid, cv=5, scoring='r2', n_jobs=-1)
rf_grid.fit(X_train, y_train)
best_rf_model = rf_grid.best_estimator_
""", language="python")

st.header("üìå **Model Evaluation**")
st.write("‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏±‡πâ‡∏á 2 ‡πÇ‡∏°‡πÄ‡∏î‡∏• ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤ R2 Score ‡πÅ‡∏•‡∏∞ Mean Absolute Error (MAE) ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:")
st.code("""
svm_r2 = best_svm_model.score(X_test, y_test)
rf_r2 = best_rf_model.score(X_test, y_test) 
svm_mae = mean_absolute_error(y_test, best_svm_model.predict(X_test))
rf_mae = mean_absolute_error(y_test, best_rf_model.predict(X_test))
""", language="python")
st.write("‡∏ã‡∏∑‡∏∂‡∏á‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤ R2 Score ‡πÅ‡∏•‡∏∞ Mean Absolute Error ‡∏Ç‡∏≠‡∏á SVM ‡πÅ‡∏•‡∏∞ Random Forest ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô")
st.write("#### üîπ SVM Performance")
st.write("- **MAE:** 2.0701")
st.write("- **RMSE:** 3.0294")
st.write("- **R¬≤ Score:** 0.8939")

st.write("#### üîπ Random Forest Performance")
st.write("- **MAE:** 1.0766")
st.write("- **RMSE:** 1.7281")
st.write("- **R¬≤ Score:** 0.9655")

st.image("image/ML/Compare.png")